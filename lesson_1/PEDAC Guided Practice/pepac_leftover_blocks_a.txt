"""
For this step, use your analysis of the problem so far to write out a
high-level algorithm that solves the problem at an abstract level.
Avoid too much implementation detail at this stage.
"""

1. Create a variable 'leftover_blocks' and set it to 0
2. Create a variable 'layer' and set it to 1
3. While the 'available_blocks' parameter is > 0:
    - Check if available_blocks - (layer * layer) is >= 0:
        - If that is True then do that calculation
        - Increase layer by 1
        - Repeat until that is False
        
        - If not then set the leftover_blocks to equal available_blocks
        - break
4. Return leftover_blocks 


available blocks = 14
leftover blocks = 0
layer = 1

while available blocks > 0:
    if available blocks - (layer * layer) >= 0:
        available blocks - (layer * layer)
    else:
        leftover blocks = available blocks
        break


"""
How do we approach writing our algorithm?
We have a mental model for our problem, but how do we move from that to a
specific set of steps for solving the problem?

When trying to abstract your thoughts about a problem, it can sometimes be
useful to imagine that you have a pen and paper, and that you're trying to
solve the problem that way. In the case of this particular problem, what might
be even more useful is to imagine that you actually have some building blocks
and are building a structure from an arbitrary number of blocks in order to
determine how many blocks you have left. If that was the case, how would you go
about doing that?

A logical approach might be something like:

High Level Algorithm

1. Build the structure one layer at a time until you no longer
   have enough blocks left to build a "valid" layer.
2. Count how many blocks you have left.

As a high-level, abstract algorithm, this is a pretty good start. In order for
our algorithm to be something we can then base our implementation on, we need
to break it down further and describe it programmatically. You want to think of
the problem in terms of patterns such as loops and conditional statements.
Remember, you don't want to be thinking at the code level just yet, so avoid
thinking in terms of specific implementation details, or even in terms of a
particular programming language.

This is where it can be useful to revisit your mental model and the specific
rules for the problem. Here are a few of the things we know and understand
about the problem:

    The smallest valid layer (the topmost layer) is comprised of one block.
    There is a direct relationship between the layer number and the number of
    blocks in that layer: layer 1 is a 1x1 square (i.e a single block), layer 2
    is a 2x2 square (i.e 4 blocks), etc. As long as we keep track of which
    layer number we are building, we can calculate the number of blocks needed
    to build it.

Since we know that the first layer will always be one block it perhaps makes
sense to start there. For each additional layer, calculate how many blocks are
needed and determine whether there are sufficient blocks remaining to build
that layer. If there are, build the latter; if not, count the remaining blocks
and return that value.

Let's write that out in a slightly more programmatic way.
Programmatic Algorithm

1. Start with:
     - The "number of blocks remaining" is equal to the input.
     - The "current layer number" is layer 1.
     - The "number of blocks required in this layer" is 1.

2. Subtract the "number of blocks required in this layer" from
   the "number of blocks remaining".

3. Calculate the "current layer number" for the next layer by
   adding 1 to the "current layer number".

4. Using the new "current layer number", calculate the "number of
   blocks required in this layer" by multiplying the "current
   layer number" by itself.

5. Determine whether the "number of blocks remaining" is greater
   than or equal to the "number of blocks required in this layer".
     - If there are enough blocks:
         - Subtract the "number of blocks required in this layer"
           from the "number of blocks remaining".
         - Go to step 3.
     - If there aren't enough blocks:
         - Return the "number of blocks remaining".

Notice how careful we are about identifying the things we are discussing. For
instance, we say "number of blocks remaining" and "number of blocks required in
this layer" instead of the less wordy but ambiguous "number of blocks". These
clear identifiers can later be reused to name your variables. A sure-fire way
to get lost in your algorithm is to use vague identifiers. For instance, if
there are two lists in your program, you need to clearly identify which is
which in your algorithm and always talk about them using precise language.

At this point, it's probably a good idea to test your algorithm against your
mental model for the problem. It's often helpful to walk through the algorithm
in the context of one or more test cases. If we do this with the very first
test case, we will spot a problem.

    At step 1, the "number of blocks remaining" will be 0, and the "current
    layer number" will be 1.
    At step 2, if we subtract 1 from "number of blocks remaining", we'll get -1
    At step 3, the new "current layer number" will be 2
    ("current layer number" plus 1, so 1 + 1).
    At step 4, the "number of blocks required" will be 2 * 2, so 4.
    At step 5, "number of blocks remaining" (-1) is less than "number of blocks
    required" (4), so we return "number of blocks remaining" (-1).

Walking through our algorithm using an actual input shows that we would get an
output of -1. If we look at the expected output for that first test however, it
should be an output of 0.

Let's adjust our algorithm to account for this issue. If we look at our
walk-through, the problem seemed to be at step 2, where we subtracted 1 from
the "number of blocks remaining" (0) to give -1. If we look closer, however,
the underlying cause of this issue is that we use step 2 at all. We have done
that since we started construction at layer 1. What can we do instead?

There are a couple of options:

    We can perform an initial check to see whether the input is 0. If it is,
    we can immediately return 0.
    We can start at a theoretical layer 0 instead of at layer 1. We can then
    remove step 2 altogether, re-numbering the subsequent steps.

Let's try the second option.

Our adjusted algorithm now looks like this:
Corrected Algorithm

1. Start with:
     - The "number of blocks remaining" is equal to the input.
     - The "current layer number" is layer 0.

2. Calculate the "current layer number" for the next layer by
   adding 1 to the "current layer number".

3. Using the new "current layer number", calculate the "number of
   blocks required in this layer" by multiplying the "current
   layer number" by itself.

4. Determine whether the "number of blocks remaining" is greater
   than or equal to the "number of blocks required in this layer".
     - If there are enough blocks:
         - Subtract the "number of blocks required in this layer"
           from the "number of blocks remaining".
         - Go to step 2.
     - If there aren't enough blocks:
         - Return the "number of blocks remaining".

If we run through our test case with our updated algorithm, we get:

    At step 1, the "number of blocks remaining" will be 0, and the
    "current layer" will be 0.
    At step 2, the "next layer" will be 1 ('current layer plus 1, so 0 + 1).
    At step 3, the "number of blocks required" will be 1 x 1, so 1.
    At step 4, the "number of blocks remaining" (0) is less than the "number of
    blocks required" (1), so we return the "number of blocks remaining" (0).

This gives us our expected output of 0.

Let's run through another one, say the third test.

    At step 1, the "number of blocks remaining" will be 2 and the
    "current layer" will be 0.
    At step 2, the "next layer" will be 1 ('current layer plus 1, so 0 + 1).
    At step 3, the "number of blocks required" will be 1 x 1, so 1.
    At step 4, the "number of blocks remaining" (2) is greater than the
    "number of blocks required" (1), so we:
        Set "number of blocks remaining" to "number of blocks remaining" minus
        "number of blocks required" (2 - 1 gives us 1).
        Set "current layer" to "current layer" plus 1 (0 + 1 gives us 1).

We then repeat the process from Step 2:

    At step 2, the "next layer" will be 2 ('current layer plus 1, so 1 + 1).
    At step 3, the "number of blocks required" will be 2 x 2, so 4.
    At step 4, the "number of blocks remaining" (1) is less than the "number of
    blocks required" (4), so we return the "number of blocks remaining" (1).

This gives us our expected output of 1.

We could run through more test cases if necessary, but at this point we're
probably confident enough in our algorithm
to move forward to the implementation.
"""